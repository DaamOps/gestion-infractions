{"ast":null,"code":"import { shareReplay, tap } from \"rxjs\";\nimport { JwtHelperService } from \"@auth0/angular-jwt\";\nimport jwt_decode from \"jwt-decode\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../../modules/user/user.service\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router, userSrv) {\n      this.http = http;\n      this.router = router;\n      this.userSrv = userSrv;\n      this.baseUrl = 'http://127.0.0.1:8080/api/v1/gestion-infractions';\n    }\n\n    login(credentials) {\n      return this.http.post(`${this.baseUrl}/auth/login`, credentials).pipe(tap(result => this.setSession(result)), shareReplay());\n    }\n\n    setSession(authResult) {\n      localStorage.setItem('token', authResult.token);\n      this.setCurrentUser();\n    }\n\n    setCurrentUser() {\n      const decodedToken = jwt_decode(localStorage.getItem(\"token\"));\n      this.userSrv.findOneByUsername(decodedToken.username).subscribe(user => {\n        localStorage.setItem('currentUser', JSON.stringify(user));\n      });\n    }\n\n    logout() {\n      localStorage.removeItem(\"token\");\n      localStorage.removeItem(\"currentUser\");\n      this.router.navigate(['home']);\n    }\n\n    isAuthenticated() {\n      const helper = new JwtHelperService();\n      const token = localStorage.getItem('token'); // Check whether the token is expired and return true or false\n\n      if (token == null) {\n        return false;\n      } else {\n        return !helper.isTokenExpired(token);\n      }\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.UserService));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}